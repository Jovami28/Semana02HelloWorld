Paso 1  instalar paquetes

Install-Package Microsoft.EntityFrameworkCore
Install-Package Microsoft.EntityFrameworkCore.SqlServer
Install-Package Microsoft.EntityFrameworkCore.Tools

Paso 2 el scaffold 

Esto es para autenticar con usuario y contraseña según la base conectada
Scaffold-DBContext "Server=UMBREON-ASUS;Database=StoreDB;User=sa;Pwd=123456789;TrustServerCertificate=True" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Infrastructure/Data -Force -nopluralize

Esto es para autenticar con windows
Scaffold-DBContext "Server=UMBREON-ASUS;Database=PeruDB;Integrated Security=true;TrustServerCertificate=True" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Data -Force -nopluralize

Paso 3 en el appsettings

"AllowedHosts": "*",
"ConnectionStrings": {
  "DevConnection": "Server=UMBREON-ASUS;Database=PeruDB;User=sa;Pwd=123456789;TrustServerCertificate=True"
}

Paso 4 en el program

aqui agregamos en API referencia del proyecto

// Add services to the container.
var _config = builder.Configuration;
var _cnx = _config.GetConnectionString("DevConnection");
builder.Services.AddDbContext<StoreDbContext>(options => { options.UseSqlServer(_cnx); });

builder.Services.AddTransient<ICategoryRepository, CategoryRepository>();

Paso 5 en controlers click derecho agregar eleemento con scafoold  
seleccionar lo tabla que se desea trabajar

Paso 6 

En la carpeta repositories click derecho agregamos una clase y colocamos la clase castegoryrepository

    public class CategoryRepository
    {
        private readonly StoreDbContext _dbContext;

        public CategoryRepository(StoreDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        public async Task<IEnumerable<Category>> GetAll()
        {
            return await _dbContext.Category.ToListAsync();
        }
    }

paso 7

para crear la interfaz nos posicionamos en el clase click derecho y acciones rapidas / extraer interfaz  y esa interfaz creada la movemos a la carpeta que corresponde

paso 8

en controladores agregamos un controlado  /  en API / controlador API en blanco

 public class CategoryController : ControllerBase
 {
     private readonly ICategoryRepository _categoryRepository;

     public CategoryController(ICategoryRepository categoryRepository)
     {
         _categoryRepository = categoryRepository;
     }

     [HttpGet]
     public async Task<IActionResult> GetAll()
     {
         var categories = await _categoryRepository.GetAll();
         return Ok(categories);
     }
 }

Paso 9 todas las interfaces se registran en program

builder
    .Services
    .AddTransient<ICategoryRepository, CategoryRepository>();

Esto es para crear un proyecto desde 0 

1-crear proyecto ASP.NET core web api (ne WEBAPI)
2-NET 7 y checks en usar y habilitar
3-En la solución de la derecha colocar Agregar / Nuevo proyecto /
biblioteca de clases / le colocamos .domain (al final) /
borramos la Class1.cs que se crea
4- en la solución colocar agregar / nuevo proyecto / 
proyecto de base de datos de SQL server  (en el buscador base de datos) /
podemos colocarle en el nombre .Database 
5-en la solución colocamos importar / base de datos / seleccionamos
conexión colocamos el nombre del servidor y como esta autenticado /
darle check a importar solo objetos con ambito / finalizar
6- en la DOMAIN agregar / nueva carpeta / agregamos las siguientes 
carpetas: Core (DTO, Entities, Interfaces, Services, Settings) 
Infrastructure (data,repositories, shared)
7- en la barra de herramientas seleccionar Administrador de paquetes
nuget / consola de administrador de paquetes
8- los paquetes para instalar del scaffold los realizamos en el 
.DOMAIN se selecciona el proyecto en el cual quieres instalar
9- los C# creados por default en DATA tenemos que moverlos a Entities
todo menos el DbContext.cs ese se queda en DATA terminado ello 
en la solución seleccionamos Recompilar solución






